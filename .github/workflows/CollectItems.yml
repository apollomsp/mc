name: Collect Service Messages

on:
  schedule:
    # Run every 8 hours at minutes 0 (00:00, 08:00, 16:00 UTC)
    - cron: '0 */8 * * *'
  workflow_dispatch: # Allow manual trigger

env:
  TENANT_ID: ${{ secrets.TENANT_ID }}
  CLIENT_ID: ${{ secrets.CLIENT_ID }}
  CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}

jobs:
  collect-messages:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Microsoft Graph Access Token
        id: get-token
        run: |
          # Get access token using client credentials flow
          response=$(curl -s -X POST "https://login.microsoftonline.com/${{ env.TENANT_ID }}/oauth2/v2.0/token" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "client_id=${{ env.CLIENT_ID }}" \
            -d "client_secret=${{ env.CLIENT_SECRET }}" \
            -d "scope=https://graph.microsoft.com/.default" \
            -d "grant_type=client_credentials")
          
          # Extract access token from response
          access_token=$(echo "$response" | jq -r '.access_token')
          
          if [ "$access_token" = "null" ] || [ -z "$access_token" ]; then
            echo "Failed to get access token"
            echo "Response: $response"
            exit 1
          fi
          
          echo "::add-mask::$access_token"
          echo "access_token=$access_token" >> $GITHUB_OUTPUT

      - name: Fetch Service Messages
        id: fetch-messages
        run: |
          # Fetch service messages from Microsoft Graph
          response=$(curl -s -X GET "https://graph.microsoft.com/v1.0/admin/serviceAnnouncement/messages" \
            -H "Authorization: Bearer ${{ steps.get-token.outputs.access_token }}" \
            -H "Content-Type: application/json")
          
          # Check if the response contains an error
          if echo "$response" | jq -e '.error' > /dev/null; then
            echo "Error fetching service messages:"
            echo "$response" | jq '.error'
            exit 1
          fi
          
          # Save the response to a file
          echo "$response" > service-messages.json
          
          # Pretty print for verification (optional)
          echo "Successfully fetched $(echo "$response" | jq '.value | length') messages"
          echo "$response"

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Add the file if there are changes
          if git diff --exit-code service-messages.json > /dev/null; then
            echo "No changes to commit"
          else
            git add service-messages.json
            git commit -m "Update service messages - $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
            git push
          fi